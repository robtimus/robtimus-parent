<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN" "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--
    This configuration file was written by the eclipse-cs plugin configuration editor
-->
<!--
    Checkstyle-Configuration: Robtimus
    Description: none
-->
<module name="Checker">
  <property name="severity" value="warning"/>
  <module name="TreeWalker">
    <!-- Annotations -->
    <module name="AnnotationLocation">
      <property name="tokens" value="CLASS_DEF,INTERFACE_DEF,PACKAGE_DEF,ENUM_CONSTANT_DEF,ENUM_DEF,METHOD_DEF,CTOR_DEF,VARIABLE_DEF,ANNOTATION_DEF,ANNOTATION_FIELD_DEF"/>
      <property name="allowSamelineSingleParameterlessAnnotation" value="false"/>
    </module>
    <module name="AnnotationUseStyle"/>
    <module name="MissingDeprecated"/>
    <module name="MissingOverride"/>
    <module name="PackageAnnotation"/>
    <module name="SuppressWarnings"/>

    <!-- Block Checks -->
    <module name="AvoidNestedBlocks"/>
    <module name="EmptyBlock">
      <property name="option" value="text"/>
      <property name="tokens" value="LITERAL_WHILE,LITERAL_TRY,LITERAL_CATCH,LITERAL_FINALLY,LITERAL_DO,LITERAL_IF,LITERAL_ELSE,LITERAL_FOR,INSTANCE_INIT,STATIC_INIT,LITERAL_SWITCH,LITERAL_SYNCHRONIZED,LITERAL_CASE,LITERAL_DEFAULT,ARRAY_INIT"/>
    </module>
    <module name="EmptyCatchBlock"/>
    <module name="LeftCurly">
      <property name="ignoreEnums" value="false"/>
    </module>
    <module name="NeedBraces"/>
    <module name="RightCurly">
      <property name="tokens" value="LITERAL_TRY,LITERAL_CATCH,LITERAL_FINALLY,LITERAL_IF,LITERAL_ELSE,CLASS_DEF,METHOD_DEF,CTOR_DEF,LITERAL_FOR,LITERAL_WHILE,LITERAL_DO,STATIC_INIT,INSTANCE_INIT,ANNOTATION_DEF,ENUM_DEF"/>
    </module>

    <!-- Class Design -->
    <module name="FinalClass"/>
    <module name="HideUtilityClassConstructor"/>
    <module name="InterfaceIsType"/>
    <module name="MutableException"/>
    <module name="OneTopLevelClass"/>
    <module name="ThrowsCount">
      <property name="max" value="3"/>
    </module>

    <!-- Coding -->
    <module name="ArrayTrailingComma"/>
    <module name="AvoidDoubleBraceInitialization"/>
    <module name="CovariantEquals"/>
    <module name="DefaultComesLast"/>
    <module name="EmptyStatement"/>
    <module name="EqualsAvoidNull"/>
    <module name="EqualsHashCode"/>
    <module name="FallThrough">
      <property name="checkLastCaseGroup" value="true"/>
      <property name="reliefPattern" value="\$FALL-THROUGH\$|fallthru|falls? ?through"/>
    </module>
    <module name="IllegalInstantiation">
      <property name="classes" value="java.lang.Boolean, java.lang.Byte, java.lang.Character, java.lang.Short, java.lang.Integer, java.lang.Long, java.lang.Float, java.lang.Double"/>
    </module>
    <module name="IllegalThrows"/>
    <module name="InnerAssignment"/>
    <module name="MissingSwitchDefault"/>
    <module name="MultipleVariableDeclarations"/>
    <module name="NestedForDepth">
      <property name="max" value="3"/>
    </module>
    <module name="NestedIfDepth">
      <property name="max" value="3"/>
    </module>
    <module name="NestedTryDepth">
      <property name="max" value="3"/>
    </module>
    <module name="NoFinalizer"/>
    <module name="OneStatementPerLine"/>
    <module name="PackageDeclaration"/>
    <module name="SimplifyBooleanExpression"/>
    <module name="SimplifyBooleanReturn"/>
    <module name="StringLiteralEquality"/>
    <module name="SuperClone"/>
    <module name="SuperFinalize"/>
    <module name="UnnecessaryParentheses"/>
    <module name="UnnecessarySemicolonAfterOuterTypeDeclaration"/>
    <module name="UnnecessarySemicolonAfterTypeMemberDeclaration"/>
    <module name="UnnecessarySemicolonInEnumeration"/>
    <module name="UnnecessarySemicolonInTryWithResources"/>

    <!-- Imports -->
    <module name="AvoidStarImport"/>
    <module name="IllegalImport">
      <property name="illegalPkgs" value="sun, sunw, com.oracle, com.sun"/>
    </module>
    <module name="RedundantImport"/>
    <module name="UnusedImports"/>

    <!-- Javadoc Comments -->
    <module name="AtclauseOrder"/>
    <module name="InvalidJavadocPosition"/>
    <module name="JavadocBlockTagLocation"/>
    <module name="JavadocMethod">
      <property name="id" value="default"/>
      <property name="scope" value="protected"/>
      <property name="tokens" value="METHOD_DEF,CTOR_DEF"/>
    </module>
    <module name="JavadocMethod">
      <property name="id" value="annotations"/>
      <property name="scope" value="protected"/>
      <property name="allowMissingReturnTag" value="true"/>
      <property name="tokens" value="ANNOTATION_FIELD_DEF"/>
    </module>
    <module name="JavadocMissingWhitespaceAfterAsterisk"/>
    <module name="JavadocStyle"/>
    <module name="JavadocType">
      <property name="excludeScope" value="anoninner"/>
      <property name="authorFormat" value="^.+ .+$"/>
    </module>
    <module name="JavadocVariable">
      <property name="scope" value="protected"/>
    </module>
    <module name="MissingJavadocPackage"/>
    <module name="MissingJavadocType">
      <property name="scope" value="protected"/>
    </module>
    <module name="NonEmptyAtclauseDescription"/>

    <!-- Miscellaneous -->
    <module name="ArrayTypeStyle"/>
    <module name="CommentsIndentation"/>
    <module name="Indentation">
      <property name="arrayInitIndent" value="8"/>
      <property name="caseIndent" value="0"/>
      <property name="lineWrappingIndentation" value="8"/>
    </module>
    <!--<module name="NoCodeInFile"/>-->
    <module name="OuterTypeFilename"/>
    <module name="UpperEll"/>

    <!-- Modifiers -->
    <module name="ModifierOrder"/>
    <module name="RedundantModifier"/>

    <!-- Naming Conventions -->
    <module name="ClassTypeParameterName">
      <property name="format" value="^[A-Z][A-Z0-9]{0,2}$"/>
    </module>
    <module name="ConstantName">
      <property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*|uiClassID$"/>
    </module>
    <module name="InterfaceTypeParameterName">
      <property name="format" value="^[A-Z][A-Z0-9]{0,2}$"/>
    </module>
    <module name="LambdaParameterName"/>
    <module name="LocalFinalVariableName"/>
    <module name="LocalVariableName"/>
    <module name="MemberName"/>
    <module name="MethodName"/>
    <module name="MethodTypeParameterName">
      <property name="format" value="^[A-Z][A-Z0-9]{0,2}$"/>
    </module>
    <module name="PackageName"/>
    <module name="ParameterName"/>
    <module name="StaticVariableName"/>
    <module name="TypeName"/>

    <!-- Size Violations -->
    <module name="OuterTypeNumber"/>

    <!-- Whitespace -->
    <module name="EmptyForInitializerPad">
      <property name="option" value="space"/>
    </module>
    <module name="EmptyForIteratorPad">
      <property name="option" value="space"/>
    </module>
    <module name="EmptyLineSeparator">
      <property name="allowNoEmptyLineBetweenFields" value="true"/>
      <property name="allowMultipleEmptyLines" value="false"/>
      <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
    </module>
    <module name="GenericWhitespace"/>
    <module name="MethodParamPad"/>
    <module name="NoLineWrap"/>
    <module name="NoWhitespaceAfter">
      <property name="tokens" value="AT,INC,DEC,UNARY_MINUS,UNARY_PLUS,BNOT,LNOT,DOT,ARRAY_DECLARATOR,INDEX_OP,METHOD_REF"/>
    </module>
    <module name="NoWhitespaceBefore">
      <property name="allowLineBreaks" value="true"/>
      <property name="tokens" value="COMMA,SEMI,POST_INC,POST_DEC,DOT,GENERIC_END,ELLIPSIS,METHOD_REF,LABELED_STAT"/>
    </module>
    <module name="OperatorWrap">
      <property name="tokens" value="QUESTION,COLON,EQUAL,NOT_EQUAL,DIV,PLUS,MINUS,STAR,MOD,SR,BSR,GE,GT,SL,LE,LT,BXOR,BOR,LOR,BAND,LAND,LITERAL_INSTANCEOF,TYPE_EXTENSION_AND,ASSIGN,DIV_ASSIGN,PLUS_ASSIGN,MINUS_ASSIGN,STAR_ASSIGN,MOD_ASSIGN,SR_ASSIGN,BSR_ASSIGN,SL_ASSIGN,BXOR_ASSIGN,BOR_ASSIGN,BAND_ASSIGN,METHOD_REF"/>
    </module>
    <module name="ParenPad"/>
    <module name="SeparatorWrap">
      <property name="option" value="nl"/>
      <property name="tokens" value="DOT,AT,METHOD_REF"/>
    </module>
    <module name="SeparatorWrap">
      <property name="option" value="eol"/>
      <property name="tokens" value="COMMA,ELLIPSIS"/>
    </module>
    <module name="SingleSpaceSeparator">
      <property name="validateComments" value="true"/>
    </module>
    <module name="TypecastParenPad"/>
    <module name="WhitespaceAfter"/>
    <module name="WhitespaceAround">
      <property name="tokens" value="ASSIGN,ARRAY_INIT,BAND,BAND_ASSIGN,BOR,BOR_ASSIGN,BSR,BSR_ASSIGN,BXOR,BXOR_ASSIGN,COLON,DIV,DIV_ASSIGN,DO_WHILE,EQUAL,GE,GT,LAMBDA,LAND,LCURLY,LE,LITERAL_ASSERT,LITERAL_CATCH,LITERAL_DO,LITERAL_ELSE,LITERAL_FINALLY,LITERAL_FOR,LITERAL_IF,LITERAL_RETURN,LITERAL_SWITCH,LITERAL_SYNCHRONIZED,LITERAL_TRY,LITERAL_WHILE,LOR,LT,MINUS,MINUS_ASSIGN,MOD,MOD_ASSIGN,NOT_EQUAL,PLUS,PLUS_ASSIGN,QUESTION,RCURLY,SL,SLIST,SL_ASSIGN,SR,SR_ASSIGN,STAR,STAR_ASSIGN,TYPE_EXTENSION_AND"/>
      <property name="ignoreEnhancedForColon" value="false"/>
    </module>
  </module>

    <!-- Headers -->
  <module name="RegexpHeader">
    <property name="id" value="Apache"/>
    <property name="header" value="^/\*$\n^ \* (([A-Z][a-zA-Z0-9]+)|package-info)\.java$\n^ \* Copyright \d{4}(-\d{4})? .+ .+$\n^ \*$\n^ \* Licensed under the Apache License, Version 2\.0 \(the &quot;License&quot;\);$\n^ \* you may not use this file except in compliance with the License\.$\n^ \* You may obtain a copy of the License at$\n^ \*$\n^ \*     http://www\.apache\.org/licenses/LICENSE-2\.0$\n^ \*$\n^ \* Unless required by applicable law or agreed to in writing, software$\n^ \* distributed under the License is distributed on an &quot;AS IS&quot; BASIS,$\n^ \* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied\.$\n^ \* See the License for the specific language governing permissions and$\n^ \* limitations under the License\.$\n^ \*/$\n"/>
    <property name="fileExtensions" value="java"/>
  </module>

  <!-- Javadoc Comments -->
  <module name="JavadocPackage"/>

  <!-- Miscellaneous -->
  <module name="NewlineAtEndOfFile">
    <property name="lineSeparator" value="lf_cr_crlf"/>
  </module>
  <module name="Translation"/>
  <module name="UniqueProperties"/>

  <!-- Size Violations -->
  <module name="LineLength">
    <property name="max" value="150"/>
  </module>

  <!-- Whitespace -->
  <module name="FileTabCharacter">
    <property name="eachLine" value="true"/>
  </module>

  <!-- Regexes -->
  <module name="RegexpMultiline">
    <metadata name="net.sf.eclipsecs.core.comment" value="Two or more empty lines in a row"/>
    <property name="id" value="two-or-more-empty-lines-in-a-row"/>
    <property name="format" value="^(\r?\n){2,}"/>
    <property name="message" value="Two or more empty lines in a row"/>
  </module>
  <module name="RegexpSingleline">
    <metadata name="net.sf.eclipsecs.core.comment" value="Line ending in whitespace"/>
    <property name="id" value="line-ending-in-whitespace"/>
    <property name="format" value="\s+$"/>
    <property name="message" value="Line ending in whitespace"/>
  </module>
  <module name="RegexpMultiline">
    <metadata name="net.sf.eclipsecs.core.comment" value="Empty line after line equaling {, ( or ["/>
    <property name="id" value="empty-line-after-single-opening-character"/>
    <property name="format" value="\r?\n[\s&amp;&amp;[^\r\n]]*[{(\[]\r?\n\r?\n"/>
    <property name="message" value="Empty line after line equaling {, ( or ["/>
  </module>
  <module name="RegexpMultiline">
    <metadata name="net.sf.eclipsecs.core.comment" value="Empty line before line equaling }, ) or ]"/>
    <property name="id" value="empty-line-before-single-closing-character"/>
    <property name="format" value="^\r?\n\s*[})\]]\r?\n"/>
    <property name="message" value="Empty line before line equaling }, ) or ]"/>
  </module>
  <module name="RegexpMultiline">
    <metadata name="net.sf.eclipsecs.core.comment" value="Empty line between imports"/>
    <property name="id" value="empty-line-between-imports"/>
    <property name="format" value="import .*;\r?\n\r?\nimport "/>
    <property name="message" value="Empty line between imports"/>
  </module>
  <module name="RegexpMultiline">
    <metadata name="net.sf.eclipsecs.core.comment" value="Missing empty line after package statement"/>
    <property name="id" value="missing-empty-line-after-package"/>
    <property name="format" value="^package .*;\r?\n(?!(\r?\n)|$)"/>
    <property name="message" value="Missing empty line after package statement"/>
  </module>
  <module name="RegexpMultiline">
    <metadata name="net.sf.eclipsecs.core.comment" value="Missing empty line after imports"/>
    <property name="id" value="missing-empty-line-after-imports"/>
    <property name="format" value="^import .*;\r?\n(?!(\r?\n)|\s*import |$)"/>
    <property name="message" value="Missing empty line after imports"/>
  </module>
  <module name="RegexpSingleline">
    <metadata name="net.sf.eclipsecs.core.comment" value="Whitespace before package statement"/>
    <property name="id" value="whitespace-before-package"/>
    <property name="format" value="^[ ]+package "/>
    <property name="message" value="Whitespace before package statement"/>
  </module>
  <module name="RegexpSingleline">
    <metadata name="net.sf.eclipsecs.core.comment" value="Whitespace before import statement"/>
    <property name="id" value="whitespace-before-import"/>
    <property name="format" value="^[ ]+import "/>
    <property name="message" value="Whitespace before import statement"/>
  </module>
  <module name="RegexpSingleline">
    <metadata name="net.sf.eclipsecs.core.comment" value="Duplicate whitespace characters"/>
    <property name="severity" value="ignore"/>
    <property name="id" value="duplicate-whitespace-characters"/>
    <property name="format" value="(?&lt;!MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.)(?&lt;!^\s+\*)(?&lt;=[^\s])\s{2,}(?=[^\s])"/>
    <property name="message" value="Duplicate whitespace characters"/>
    <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
  </module>
  <module name="RegexpSingleline">
    <metadata name="net.sf.eclipsecs.core.comment" value="{ on its own line"/>
    <property name="id" value="single-left-curly-line"/>
    <property name="severity" value="ignore"/>
    <property name="format" value="^\s*\{"/>
    <property name="message" value="'{' on its own line"/>
    <metadata name="net.sf.eclipsecs.core.lastEnabledSeverity" value="inherit"/>
  </module>

  <!-- Don't require package, type or method Javadoc for test classes -->
  <module name="SuppressionSingleFilter">
    <property name="files" value="src[\\/]test[\\/]java[\\/].*"/>
    <property name="checks" value="JavadocPackage|MissingJavadocPackage|MissingJavadocType|MissingJavadocMethod"/>
  </module>
  <!-- Don't require a max length for resources -->
  <module name="SuppressionSingleFilter">
    <property name="files" value="src[\\/](main|test)[\\/]resources[\\/].*"/>
    <property name="checks" value="LineLength"/>
  </module>
  <!-- Allow per-project custom suppressions -->
  <module name="SuppressionFilter">
    <property name="file" value="${basedir}/checkstyle_suppressions.xml"/>
    <property name="optional" value="true"/>
  </module>
</module>
